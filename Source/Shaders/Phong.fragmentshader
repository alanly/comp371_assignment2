#version 330 core


// Light and Material Uniform Variables
uniform vec4 materialCoefficients; // x: ambient   y: diffuse   z: specular   w: specular exponent

uniform vec3 lightColor;
uniform vec3 lightAttenuation; // x: kC  y: kL  z: kQ


// Inputs
in vec3 v_color;		 // vertex color: also diffuse color

in vec3 normal;          // Transformed normal in View Space
in vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
in vec4 lightVector;     // Vector from the vertex to the Light in View Space
						 // Length of lightVector is the distance between light and vertex
						 // if w = 1: Point light, if w = 0: directional light

// Ouput data
out vec3 color;


void main()
{
	// Implment Phong Shading based on the parameters above
	// Remember that directional light don't have attenuation
	
	//color = v_color;

	// Prepare some values that we'll need
	float d = length(lightVector); // Distance of the light from our vertex
	vec3 I_light = (1 / pow(d, 2)) * lightColor; // Our light intensity
	vec3 N = normalize(normal);
	vec3 L = vec3(normalize(lightVector));

	// The ambient illumination
	// We're not given an ambient intensity, therefore we will assume 1.0.
	vec3 I_amb = vec3(materialCoefficients.x);

	// The diffused reflection
	vec3 I_d = vec3(materialCoefficients.y) * dot(normal, L);

	color = (I_amb + I_d) * v_color;
}
